basePath: /
definitions:
  models.Event:
    properties:
      dateTime:
        type: string
      description:
        type: string
      id:
        type: integer
      location:
        type: string
      name:
        type: string
      userID:
        type: integer
    required:
    - dateTime
    - description
    - location
    - name
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
    type: object
host: localhost:8000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for demonstrating Swagger.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Your API Title
  version: "1.0"
paths:
  /events:
    get:
      consumes:
      - application/json
      description: Retrieves all events.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved events
          schema:
            items:
              $ref: '#/definitions/models.Event'
            type: array
        "500":
          description: Could not fetch events
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all events
      tags:
      - events
    post:
      consumes:
      - application/json
      description: Creates a new event and saves it to the database.
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Event data
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/models.Event'
      produces:
      - application/json
      responses:
        "201":
          description: Event created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Could not parse request data
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new event
      tags:
      - events
  /events/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an event by its ID.
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Event deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid event ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Event not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Could not delete event
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete an event by ID
      tags:
      - events
    get:
      consumes:
      - application/json
      description: Retrieves a single event by its ID.
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved event
          schema:
            $ref: '#/definitions/models.Event'
        "400":
          description: Invalid event ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Event not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get an event by ID
      tags:
      - events
    put:
      consumes:
      - application/json
      description: Updates an existing event by its ID.
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated event data
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/models.Event'
      produces:
      - application/json
      responses:
        "200":
          description: Event updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid event ID or request data
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Event not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Could not update event
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update an event by ID
      tags:
      - events
  /users/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token upon successful login.
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: 'message: Login successful, token: <JWT Token>'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'message: Could not parse request data'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: 'message: Invalid credentials'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'message: Could not generate token'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User Login
      tags:
      - users
  /users/signup:
    post:
      consumes:
      - application/json
      description: Registers a new user by saving their details in the database. It
        hashes the user's password before storing it.
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Could not parse request data
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new user
      tags:
      - users
swagger: "2.0"
